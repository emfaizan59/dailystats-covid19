{"version":3,"sources":["Components/Header/Header.js","Components/Carousel/Carousel.js","Components/SearchBar/SearchBar.js","Components/CountryList/CountryList.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Container","style","width","backgroundColor","Image","verticalAlign","size","src","margin","display","Carousel","state","update","totalCases","todayCases","totalDeaths","todayDeaths","recovered","active","critical","casesPerOneMillion","deathsPerOneMillion","totalTests","testsPerOneMillion","affectedCountries","load","componentDidMount","fetch","then","result","json","setState","UTCtoTime","updated","cases","deaths","tests","catch","error","console","log","utcTime","require","dateFormat","Date","toLocaleDateString","toLocaleTimeString","fluid","this","className","Loader","inverted","Grid","padded","Row","centered","Column","color","React","Component","SearchBar","searchValue","timeout","doChange","event","target","value","clearTimeout","setTimeout","props","callback","Input","placeholder","loading","icon","onChange","height","borderRadius","marginTop","outline","paddingLeft","arrayList","CountryList","searchTerm","fetchItem","apiURL","status","i","length","countryName","country","countryFlag","countryInfo","flag","toLowerCase","match","searchItems","columns","stackable","Segment","raised","Placeholder","image","Line","Paragraph","map","element","key","cursor","fontSize","marginBottom","compact","Footer","paddingTop","textAlign","as","Icon","name","Content","Subheader","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1fd427f6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Container , Image  } from 'semantic-ui-react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Container  style={{width : '100%' , backgroundColor : '#E7E7E7'}}>\r\n        \r\n            <Image  verticalAlign= 'middle' size=\"medium\" src=\"./images/HeaderLogo.jpg\" style={{margin : '0 auto' , display : 'block'}} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","import React from 'react'\r\nimport { Container, Header, Grid, GridColumn , Loader } from 'semantic-ui-react'\r\nimport './Carousel.css'\r\nclass Carousel extends React.Component {\r\n state = {\r\n     update : '' ,\r\n     totalCases : '' ,\r\n     todayCases : '',\r\n     totalDeaths : '' ,\r\n     todayDeaths : '',\r\n     recovered : '' , \r\n     active : '' ,\r\n     critical : '' ,\r\n     casesPerOneMillion : '' ,\r\n     deathsPerOneMillion : '' ,\r\n     totalTests : '',\r\n     testsPerOneMillion : '',\r\n     affectedCountries : '' ,\r\n     load : true\r\n }\r\n \r\n    componentDidMount = () => {\r\n\r\n          fetch(\"https://corona.lmao.ninja/v2/all\")\r\n            .then(result => result.json())\r\n            .then(result => \r\n                {\r\n    \r\n                    this.setState({\r\n                        update : this.UTCtoTime(result.updated) , \r\n                        totalCases : result.cases , \r\n                        todayCases : result.todayCases , \r\n                        totalDeaths : result.deaths , \r\n                        todayDeaths : result.todayDeaths ,\r\n                        recovered : result.recovered , \r\n                        active : result.active , \r\n                        critical : result.critical , \r\n                        casesPerOneMillion : result.casesPerOneMillion , \r\n                        deathsPerOneMillion : result.deathsPerOneMillion , \r\n                        totalTests : result.tests , \r\n                        testsPerOneMillion : result.testsPerOneMillion ,\r\n                        affectedCountries : result.affectedCountries ,\r\n                        load : false\r\n                    })\r\n\r\n    // console.log(this.state.update , this.state.totalCases , this.state.todayCases , this.state.totalDeaths , this.state.todayDeaths)\r\n\r\n\r\n                 } )\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    \r\n    UTCtoTime = (utcTime) => {\r\n        var dateFormat = require('dateformat');\r\n        var date = new Date(utcTime).toLocaleDateString(\"en-US\")\r\n        // expected output \"8/30/2017\"  \r\n        var dateLocal =  dateFormat(date, \"dddd, mmmm dS\");\r\n        // console.log(dateLocal);\r\n\r\n        var time = new Date(utcTime).toLocaleTimeString(\"en-US\")\r\n        // expected output \"3:19:27 PM\"\r\n        // console.log(time)\r\n        var dateTime  = dateLocal + \" - \"+time\r\n        // console.log(dateLocal + \" - \"+time)\r\n\r\n        return dateTime\r\n        \r\n      }\r\n      \r\n render(){\r\n    return(\r\n   <Container fluid >\r\n{this.state.load ? \r\n\r\n            <div className=\"carouselMain\">\r\n\r\n  <Loader active inverted>Loading</Loader>\r\n\r\n</div>\r\n:\r\n<div className=\"carouselMain\">\r\n\r\n            <Container >\r\n                   \r\n                    <Grid padded={true}>\r\n                        <Grid.Row >\r\n                     <h1 className=\"totalCase\">Total Cases: <strong>{this.state.totalCases}</strong></h1>\r\n                        </Grid.Row>\r\n                        <Grid.Row  centered={true} >\r\n\r\n                            <Grid.Column width={5} >\r\n                             <h2 className=\"todayCase\">Today Cases</h2>\r\n                             <strong style={{color : '#20b2bf'}} >{this.state.todayCases}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"criticalCase\">Critical Cases</h2>\r\n                            <strong>{this.state.critical}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"todayCase\">Active Cases</h2>\r\n                            <strong style={{color : '#20b2bf'}} >{this.state.active}</strong>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        \r\n\r\n                        \r\n                        \r\n                        <Grid.Row  centered='true' >\r\n\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"criticalCase\">Recovered Cases</h2>\r\n                            <strong style={{ color : '#34af53' }}>{this.state.recovered}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"todayCase\">Total Deaths</h2>\r\n                            <strong>{this.state.totalDeaths}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"criticalCase\">Today Deaths</h2>\r\n                            <strong>{this.state.todayDeaths}</strong>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        \r\n                        \r\n                        \r\n                        <Grid.Row  centered='true' >\r\n\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"todayCase\">Cases Per One Million</h2>\r\n                            <strong style={{color : '#20b2bf'}} >{this.state.casesPerOneMillion}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"criticalCase\">Deaths Per One Million</h2>\r\n                            <strong>{this.state.deathsPerOneMillion}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"criticalCase\">Affected Countries</h2>\r\n                            <strong style={{color : '#ed8e36'}} >{this.state.affectedCountries}</strong>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        \r\n\r\n\r\n                        \r\n                        <Grid.Row  centered='true' >\r\n\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"todayCase\">Total Tests</h2>\r\n                            <strong style={{color : '#d8bb2b'}}>{this.state.totalTests}</strong>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={5} >\r\n                            <h2 className=\"criticalCase\">Tests Per One Million</h2>\r\n                            <strong  style={{color : '#d8bb2b'}} >{this.state.testsPerOneMillion}</strong>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        \r\n\r\n\r\n                    </Grid>\r\n\r\n          \r\n            </Container>\r\n            <p className=\"updatedResults\">Last Updated on: {this.state.update}</p>\r\n\r\n            </div>\r\n        }\r\n\r\n</Container>\r\n )\r\n}\r\n}\r\n\r\nexport default Carousel","import React from 'react'\r\nimport {Container, Grid , Input , Icon} from 'semantic-ui-react'\r\nimport './SearchBar.css'\r\nclass SearchBar extends React.Component {\r\n    state = {\r\n        searchValue : ''\r\n    }\r\n\r\n    timeout = null;\r\n    doChange = (event) => {\r\n        this.setState({ searchValue : event.target.value  })\r\n  \r\n        clearTimeout(this.timeout)\r\n    \r\n       this.timeout = setTimeout(() => {\r\n           this.props.callback(this.state.searchValue)\r\n       }, 1000);\r\n\r\n \r\n       } \r\n    render(){\r\n        return(\r\n            <Container fluid>\r\n                <div className='searchBar'>\r\n                <Grid centered={true}>\r\n                    <Grid.Row>\r\n                <Grid.Column width={8} >\r\n                <Input placeholder=\"Search Countries\"  \r\n                fluid\r\n                loading = {this.state.searchValue === '' ? false : true}\r\n                icon='search' \r\n                onChange={this.doChange}\r\n                style={{ height:'55px' , borderRadius :'10px' , \r\n                backgroundColor:'transparent' ,  \r\n               marginTop : '10px',\r\n               color : 'black' , \r\n               outline : 'none',\r\n               paddingLeft : '10px'\r\n            }} />\r\n                </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar","import React from 'react'\r\nimport {Container , Grid, Card , Image ,Header, Icon , Segment , Placeholder} from 'semantic-ui-react'\r\nimport './CountryList.css'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\nlet arrayList = []\r\nclass CountryList extends React.Component {\r\n    state = {\r\n            load : true , \r\n            searchTerm : ''\r\n    }\r\n    \r\n\r\n    componentDidMount = () => {\r\n        this.fetchItem(\"https://corona.lmao.ninja/v2/countries\" , 'all')       \r\n    }\r\n\r\n    fetchItem = (apiURL , status) => {\r\n     arrayList = []\r\n        fetch(apiURL)\r\n        .then(result => result.json())\r\n        .then(result => {\r\n            // console.log(result.length)\r\n            if(status === 'all')\r\n            {\r\n            \r\n            for(var i = 0 ; i < result.length ; i++)\r\n              {\r\n                arrayList[i] = {countryName : result[i].country ,\r\n                countryFlag : result[i].countryInfo.flag , \r\n                update : this.UTCtoTime(result[i].updated)  , \r\n                totalCases : result[i].cases , \r\n                todayCases : result[i].todayCases ,\r\n                totalDeaths : result[i].deaths ,\r\n                todayDeaths : result[i].todayDeaths , \r\n                recovered : result[i].recovered , \r\n                active : result[i].active , \r\n                critical : result[i].critical , \r\n                totalTests :result[i].tests , \r\n                }\r\n           } \r\n          } \r\n          else{\r\n            for(var i = 0 ; i < result.length ; i++)\r\n         {\r\n          if(result[i].country.toLowerCase().match(status.toLowerCase()))\r\n          {\r\n              arrayList[i] = {countryName : result[i].country ,\r\n              countryFlag : result[i].countryInfo.flag , \r\n              update : this.UTCtoTime(result[i].updated)  , \r\n              totalCases : result[i].cases , \r\n              todayCases : result[i].todayCases ,\r\n              totalDeaths : result[i].deaths ,\r\n              todayDeaths : result[i].todayDeaths , \r\n              recovered : result[i].recovered , \r\n              active : result[i].active , \r\n              critical : result[i].critical , \r\n              totalTests :result[i].tests , \r\n              }\r\n            }\r\n         }\r\n          }\r\n           this.setState({ load : false})\r\n        })\r\n      \r\n    \r\n    }\r\n    \r\n\r\n    UTCtoTime = (utcTime) => {\r\n        var dateFormat = require('dateformat');\r\n        var date = new Date(utcTime).toLocaleDateString(\"en-US\")\r\n        // expected output \"8/30/2017\"  \r\n        var dateLocal =  dateFormat(date, \"dddd, mmmm dS\");\r\n        // console.log(dateLocal);\r\n\r\n        var time = new Date(utcTime).toLocaleTimeString(\"en-US\")\r\n        // expected output \"3:19:27 PM\"\r\n        // console.log(time)\r\n        var dateTime  = dateLocal + \" - \"+time\r\n        // console.log(dateLocal + \" - \"+time)\r\n\r\n        return dateTime\r\n        \r\n      }\r\n\r\n      searchItems = (searchTerm) =>{\r\n        console.log(searchTerm)\r\n\r\n        this.setState({\r\n        \r\n            load : true,\r\n            searchTerm : searchTerm\r\n        })\r\n   \r\n        if(searchTerm === '')\r\n        {\r\n          this.fetchItem(\"https://corona.lmao.ninja/v2/countries\" , 'all')\r\n        }\r\n        else{\r\n          this.fetchItem(\"https://corona.lmao.ninja/v2/countries\" , searchTerm)    \r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n\r\n            <Container style={{marginTop : '20px'}}>\r\n          <SearchBar callback={this.searchItems} />\r\n\r\n{this.state.load ?  \r\n<Grid columns={3}  stackable={true}  padded={true}>\r\n    <Grid.Column >\r\n      <Segment raised style={{height : '300px'}}>\r\n        <Placeholder>\r\n          <Placeholder.Header image>\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n          </Placeholder.Header>\r\n          <Placeholder.Paragraph>\r\n            <Placeholder.Line length='medium' />\r\n            <Placeholder.Line length='short' />\r\n          </Placeholder.Paragraph>\r\n        </Placeholder>\r\n      </Segment>\r\n    </Grid.Column>\r\n\r\n    <Grid.Column>\r\n      <Segment raised style={{height : '300px'}}>\r\n        <Placeholder>\r\n          <Placeholder.Header image>\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n          </Placeholder.Header>\r\n          <Placeholder.Paragraph>\r\n            <Placeholder.Line length='medium' />\r\n            <Placeholder.Line length='short' />\r\n          </Placeholder.Paragraph>\r\n        </Placeholder>\r\n      </Segment>\r\n    </Grid.Column>\r\n\r\n    <Grid.Column>\r\n      <Segment raised style={{height : '300px'}}>\r\n        <Placeholder>\r\n          <Placeholder.Header image>\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n          </Placeholder.Header>\r\n          <Placeholder.Paragraph>\r\n            <Placeholder.Line length='medium' />\r\n            <Placeholder.Line length='short' />\r\n          </Placeholder.Paragraph>\r\n        </Placeholder>\r\n      </Segment>\r\n    </Grid.Column>\r\n  </Grid>\r\n:\r\n<div style={{marginTop : '50px'}}>\r\n\r\n{arrayList.length > 0 ?\r\n\r\n<Grid columns={3}  padded={true} stackable={true} >\r\n\r\n{arrayList.map( (element , i) => (\r\n //  <Grid.Column style={{marginBottom : '60px' , cursor : 'pointer'}}>\r\n <Grid.Column className=\"cardView\">\r\n <Segment key={i} raised style={{cursor : 'pointer'}} >\r\n        <Image src={element.countryFlag || '/images/caouselBG.jpg'} centered style={{height : '170px' , width:'100%'}}  />\r\n        <h2 style={{fontSize : '25px' , marginBottom :'-3px'}} >{element.countryName}</h2>\r\n<span className='date'>Last Update: {element.update}</span>\r\n        <div className=\"totalCases\">\r\n            <h2>Total Cases</h2>\r\n            <h2 style={{color:'#E02D2F'}}>{element.totalCases || '-'}</h2>\r\n        </div>\r\n     <div className=\"details\">\r\n        <Grid padded={true}>\r\n            <Grid.Row >\r\n                <Grid.Column width={8}>\r\n    <Segment color=\"olive\" raised ={true} style={{marginTop:'-10px' , width : '100%' }} compact={true} size=\"mini\"  >\r\n        <div className=\"twoColDiv\">\r\n            <h5>Today Cases</h5>\r\n            <h5>{element.todayCases || '-'}</h5>\r\n        </div>\r\n        </Segment>      \r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n      <Segment color=\"green\" raised ={true} style={{marginTop:'-10px' , width : '100%' }} compact={true} size=\"mini\"  >\r\n        <div className=\"twoColDiv\">\r\n            <h5>Total Active</h5>\r\n            <h5>{element.active || '-'}</h5>\r\n        </div>      \r\n        </Segment>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n\r\n            <Grid.Row centered={true} >\r\n                <Grid.Column width={8}>\r\n<Segment color=\"red\"  raised ={true} style={{marginTop:'-10px', width : '100%' }}  size=\"mini\"  >\r\n                \r\n        <div className=\"twoColDiv\">\r\n            <h5>Total Deaths</h5>\r\n            <h5>{element.totalDeaths || '-'}</h5>\r\n        </div>  \r\n        </Segment>    \r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n<Segment color=\"red\" raised ={true} style={{marginTop:'-10px' , width : '100%'}} size=\"mini\"  >\r\n                    \r\n        <div className=\"twoColDiv\">\r\n            <h5>Today Death</h5>\r\n            <h5>{element.todayDeaths || '-'}</h5>\r\n        </div>      \r\n        </Segment>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row centered={true}>\r\n                <Grid.Column width={8}>\r\n<Segment color=\"teal\" raised ={true} style={{marginTop:'-10px', width : '100%' }}  size=\"mini\"  >\r\n                \r\n        <div className=\"twoColDiv\">\r\n            <h5>Recovered</h5>\r\n            <h5>{element.recovered || '-'}</h5>\r\n        </div>      \r\n</Segment>\r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n<Segment color=\"red\" raised ={true} style={{marginTop:'-10px', width : '100%' }}  size=\"mini\"  >\r\n          \r\n        <div className=\"twoColDiv\">\r\n            <h5>Critical</h5>\r\n            <h5>{element.critical || '-'}</h5>\r\n        </div>      \r\n</Segment>\r\n                </Grid.Column>\r\n\r\n            </Grid.Row>\r\n\r\n\r\n            <Grid.Row centered={true}>\r\n                <Grid.Column width={16}>\r\n<Segment color=\"blue\" raised ={true} style={{marginTop:'-10px', width : '100%' }} compact={true} size=\"mini\"  >    \r\n        <div className=\"twoColDiv\">\r\n            <h5>Total Tests Conducted</h5>\r\n            <h5>{element.totalTests || '-'}</h5>\r\n        </div>      \r\n</Segment>\r\n                </Grid.Column>\r\n             \r\n            </Grid.Row>\r\n\r\n\r\n        </Grid>\r\n        </div>\r\n    \r\n  \r\n</Segment>\r\n</Grid.Column>\r\n\r\n)\r\n)\r\n}\r\n\r\n</Grid>\r\n  //  {/* </Card.Group> */}\r\n  \r\n:\r\n<h1>No Result Found ...</h1>\r\n}\r\n</div>\r\n\r\n}\r\n</Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CountryList","import React from 'react'\r\nimport { Container , Header , Icon} from 'semantic-ui-react'\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <Container   fluid style={{ backgroundColor : '#1A1A19' , paddingTop : '20px'}} >\r\n          <div style={{margin : '0 auto' , textAlign : 'center'}}>\r\n          <Header as='h2' icon  inverted>\r\n    <Icon name='hospital' />\r\n    <Header.Content>\r\n      COVID 19\r\n      <Header.Subheader>Live Updates</Header.Subheader>\r\n    </Header.Content>\r\n  </Header>\r\n             </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Footer","import React from 'react';\nimport Header from './Components/Header/Header'\nimport Carousel from './Components/Carousel/Carousel'\nimport SearchBar from './Components/SearchBar/SearchBar'\nimport CountryList from './Components/CountryList/CountryList'\nimport Footer from './Components/Footer/Footer'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Carousel />\n      <CountryList />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}